As$LeukemiaType <- relevel(factor(as.character(As$LeukemiaType)), "NoL")
A <- subset(A, select = grepl("^ENS", colnames(A)))
A <- sapply(A, as.integer)
A <- t(A)
head(A)
DEG <- DESeqDataSetFromMatrix(countData = A, colData = As, design = ~ LeukemiaType)
DEG <- DESeq(DEG, fitType = "mean", parallel = T, BPPARAM = MulticoreParam(20))
n <- levels(As$LeukemiaType)[-1]
leukemiasGO <- lapply(setNames(n, n), function (n) {
x <- results(DEG, c("LeukemiaType", n, "NoL"), "LeukemiaType", alpha = .05)
x <- as.data.frame(x)
x$padj[is.na(x$padj)] <- 1
g <- new("topGOdata", ontology = "BP", description = 'Leukemia',
allGenes = setNames(x$padj, rownames(x)),
mapping = "org.Hs.eg.db",
geneSelectionFun = function (allScore) { allScore <= 0.05 },
annotationFun = annFUN.org, ID = "Ensembl")
t <- new("elimCount", testStatistic = GOFisherTest, name = "Fisher test") # test definition
s <- getSigGroups(g, t) # run F-test
r <- GenTable(g, pvalCutOff = s, topNodes = length(g@graph@nodes)) # return data.frame
r$pvalCutOff <- as.numeric(str_replace_all(r$pvalCutOff, "[^0-9e\\-\\.]*", ""))
r$LogEnrich <- log2(r$Significant / r$Expected)
ga <- genesInTerm(g) # GenesAnnotated | list of genes per go-terms
ga <- ga[r$GO.ID] # eliminate missing terms
names(ga) <- NULL
r$GenesAnnotated <- ga
xs <- x[,c("padj", "log2FoldChange")] # significant stats subset
xs <- subset(xs, padj < 0.05)
r$GenesSignificant <- lapply(r$GenesAnnotated, intersect, rownames(xs)) # extract genes
ei.rows <- mclapply(r$GenesSignificant, function (y) {
if (length(y)) as.list(xs[y,,drop=FALSE])
else as.list(rep(NA_real_, length(xs)))
}, mc.cores = 10)
ei <- mclapply(names(xs), function(z) {
lapply(ei.rows, "[[", z)
}, mc.cores = 10)
ei <- structure(ei, names = names(xs), row.names = seq(nrow(r)), class = "data.frame")
row.names(ei) <- NULL
r <- data.frame(r, ei, stringsAsFactors = FALSE, check.names = FALSE)
return(r)
})
leukemiasGO <- lapply(leukemiasGO, function(x) subset(x, pvalCutOff < 0.1))
save(leukemiasGO, file = "data/leukemiasGO.rdata")
head(leukemiasGO)
names(leukemiasGO)
x <- subset(leukemiasGO$CLL, pvalCutOff <= 0.05 & Significant > 20)
x <- x[order(-x$LogEnrich),]
cell.plot(x = setNames(x$LogEnrich, x$Term),
cells = x$log2FoldChange,
main ="GO enrichment (NoT vs CLL)",
x.mar = c(.4, 0),
key.n = 7,
y.mar = c(.1, 0),
cex = 1.6,
cell.outer = 3,
bar.scale = .7,
space = .2)
library(CellPlot)
s <- getSigGroups(g, t) # run F-test
s
cell.plot(x = setNames(x$LogEnrich, x$Term),
cells = x$log2FoldChange,
main ="GO enrichment (NoT vs CLL)",
x.mar = c(.4, 0),
key.n = 7,
y.mar = c(.1, 0),
cex = 1.6,
cell.outer = 3,
bar.scale = .7,
space = .2)
sym.plot(x = setNames(x$LogEnrich, x$Term),
cells = x$log2FoldChange,
x.annotated = x$Annotated,
main = "GO enrichment (NoT vs CLL)",
x.mar = c(.47, 0),
key.n = 7,
cex = 1.6,
axis.cex = .8,
group.cex = .7)
x$up <- lapply(Map(setNames, x$log2FoldChange, x$GenesSignificant), function (i) { i[i>0] })
x$dwn <- lapply(Map(setNames, x$log2FoldChange, x$GenesSignificant), function (i) { i[i<0] })
A <- as(leukemiasEset,"data.frame")
arc.plot(x = setNames(x$LogEnrich, x$Term),
up.list = x$up,
down.list = x$dwn,
x.mar = c(.9, .5))
install.packages('rgl')
install.packages('rgl')
?t.test
library(swirl)
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create('testdir')
setwd('~/testdir')
setwd('testdir')
getwd
getwd)_
getwd()
setwd('.')
setwd('../')
setwd('testdir')
getwd()
setwd('/home/fmetge/')
setwd('testdir')
file.create('mytest.R')
list.files()
file.exists('mytest.R')
file.info
file.info('mytest.R')
file.rename(from = 'mytest.R', to = 'mytest2.R')
file.copy(from = 'mytest2.R', to = 'mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(0, 10, by = 0.5)
my_seq <- seq(0, 10, length = 30)
my_seq <- seq(0, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Franzi")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = ' ')
paste(c(1, 2, 3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = '-')
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[seq(3,7, by = 2)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <- c("foo", 'bar', 'norf')
identical(vect, vect2)
vect["bar"]
vect[c('foo, "bar")]
')]
vect[c('foo', "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c('Bill', 'Gina', 'Kelly', 'Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
z
y
environment()
cube <- function(x, n) {
x^3
}
cube(3)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
subtmit()
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4, 0))
evaluate(function(x){x[length(x)]}, c(8,4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram('hello', 'world')
submit()
mad_libs(place = 'Cologne', adjective = 'excited', noun = 'moon')
submit()
source('/tmp/RtmppIIUGN/bin_op.R')
submit()
'I' %p% 'love %p% 'R1'
'I' %p% 'love' %p% 'R1'
'I' %p% 'love' %p% 'R!'
exit()
exit
0
quit()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
head(iris)
tapply(iris$Sepal.Length, iris$Species)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
tmp = tapply(mtcars$hp, mtcars$cyl, mean)
tmp[1] - tmp[3]
debug(ls)
ls
ls()
exit
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVektor(1:15)
makeVector(1:15)
myVec = makeVector(1:15)
cacheMean(1:15)
cachemean(1:15)
myVec$getmean
cachemean(myVec)
cachemean(myVec)
makeCacheMatrix <- function(x = matrix()) {
invert <- NULL
set <- function(y) {
x <<- y
invert <<-NULL
}
get <- function() x
setinverse <- function(solve) invert <<- solve
getinverse <- function() invert
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invert <- x$getinverse()
if(!is.null(invert)) {
message("getting cached data")
return(invert)
}
data <- x$get()
invert <- solve(data, ...)
x$setinverse(invert)
invert
}
makeCacheMatrix()
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
A <- hilbert(4)
makeCacheMatrix(A)
myMat <- makeCacheMatrix(A)
cacheSolve(myMat)
cacheSolve(myMat)
?inverse
set.seed(1)
rpois(5, 2)
?rpois
dpois(5)
dpois(5, 2)
qpois(dpois(5, 2), 2)
qpois(ppois(5, 2), 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
install.packages("gplots")
M = matrix(rnorm(25), ncol = 5)
M
M = matrix(rnorm(20), ncol = 4)
M = matrix(rnorm(20), ncol = 4)
print(M)
M[,5] <- M[,1] + M[,2]
M[,1] + M[,2]
M[,5] <- M[,1] + M[,2]
sum.1and2 <- M[,1] + M[,2]
M = matrix(rnorm(25), ncol = 5)
print(M)
sum.1and2 <- M[,1] + M[,2]
print(M)
M * 2
M = matrix(round(rnorm(25, 10, 5),1), ncol = 5)
print(M)
M[,1] + M[,2]
M[3,] + M[4,]
M[,1] * M[,2]
M * 2
SUMS <- colSums(M)
SUMS
M/SUMS
colSums(M/SUMS)
# it is not that easy
M/t(SUMS)
# it is not that easy
t(t(M)/SUMS)
# it is not that easy
colSums(t(t(M)/SUMS))
?read.csv
14.4 + 2*2.9 + 4.20
# Question 5
library(data.table)
# Question 5
library(data.table)
library(data.table)
?fread
M <- matrix(NA, ncol =3, nrow = 2)
View(M)
install.packages('plotly')
shiny::runApp('Documents/workshops/data_science/data-products/shiny_apps/exam1')
runApp('Documents/workshops/data_science/data-products/shiny_apps/exam1')
source('~/Documents/workshops/data_science/data-products/shiny_apps/e1q5.R')
shiny::runApp('Documents/corefacility/shiny_apps/shiny/VennDiagram')
runApp('Documents/corefacility/shiny_apps/shiny/VennDiagram')
runApp('Documents/corefacility/shiny_apps/shiny/VennDiagram')
install.packages("jsonlite")
runApp('Documents/corefacility/shiny_apps/shiny/VennDiagram')
runApp('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves')
runApp('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves')
D <- read.csv('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves/downloadTable.csv', header = T, as.is - text = )
D <- read.csv('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves/downloadTable.csv', header = T, as.is = T)
head(D)
typeof(D[,3:4])
class(D[,3:4])
class(D[,3])
as.factor(D[,3:4])
lapply(D[,3:4], factor)
D[, 3:4] = lapply(D[,3:4], factor)
head(D)
summary(D)
D <- read.csv('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves/downloadTable.csv', header = T, as.is = T)
summary(D)
runApp('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves')
runApp('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves')
runApp('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves')
runApp('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves')
shiny::runApp('Documents/corefacility/shiny_apps/shiny/LifeSpanCurves')
setwd("~/Documents/corefacility/shiny_apps/shiny/LifeSpanCurves")
runApp()
runApp()
